#!/usr/bin/env python3

"""
    YAML2HDF

    @author: Jayghosh S. Rao j.rao@fz-juelich.de

    @description:
        > YAML files are much more user-friendly than HDF5 and JSON files.
        > This tool wraps around CADET-Python to convert between
        > .yaml and .h5 files for use with CADET.

    @usage:
        ## YAML to HDF5
        > yaml2hdf input.yaml -o output.h5                      # Convert input.yaml to output.h5
        > yaml2hdf base.yaml modification.yaml -o output.h5     # Update base.yaml with modification.yaml and write to output.h5
        > yaml2hdf modification.yaml -o output.h5 --update      # Update an existing output.h5 with modification.yaml
        > yaml2hdf input.yaml --print                           # Print input.yaml to stdout

        ## HDF5 to YAML
        > yaml2hdf input.h5 --print                   # Print input.h5 to stdout
        > yaml2hdf input.h5 -o output.yaml            # Convert input.h5 to output.yaml

        ## Diff ANY two files
        > yaml2hdf --diff input.h5 new.yaml

        ## Additionally, use with `yq` to extract specific fields out of the yaml/hdf file
        > yaml2hdf input.h5 --print | yq '.output.solution.unit_001.solution_outlet_comp_000'

    @notes:
        > top level "meta" key is removed before converting both-ways.
        > top level "output" key is removed before writing to h5.

"""

import yaml
import argparse
import numpy as np

from deepdiff import DeepDiff
from pprint import pprint
from pathlib import Path
import tempfile
import os

from subprocess import run

from cadet import Cadet
from addict import Dict

ENCODING = 'ascii'

ap = argparse.ArgumentParser(description='Convert between yaml and hdf5')
ap.add_argument("-o", "--output", help="Output filename")
ap.add_argument("-u", "--update", action='store_true', help="Update existing h5 file")
ap.add_argument("-p", "--print", action='store_true', help="Print to stdout")
ap.add_argument("-k", "--key", choices=['input', 'output'], help="Print/write either 'input' or 'output' key only")
ap.add_argument("-e", "--edit", help="Edit h5 files in place as html files")
ap.add_argument("-d", "--diff", nargs=2, help="Diff 2 files. Can diff yaml vs h5 as well.")
ap.add_argument("files", nargs='*', help="Input files. Will be applied in order")
args = vars(ap.parse_args())

## TODO: Might not be required
def reconstruct(dic:dict):
    """
    Convert from addict dict filled with numpy types to
    dict filled with python native types
    """
    # cleandict = {}
    dic = dict(dic)
    for key in dic.keys():
        if isinstance(dic[key], Dict):
            value = reconstruct(dic[key])
            # cleandict.update({key: value})
            dic.update({key: value})
        else:
            value = np2native(dic[key])
            # cleandict.update({key: value})
            dic.update({key: value})
    # return cleandict
    return dic

def update_nested(refdict:dict, newdict:dict):
    """
    Update a dictionary in a nested manner.
    (Don't just overwrite top level key/values as is default behavior)
    """
    for key, value in newdict.items():
        if key in refdict.keys():
            if isinstance(value, dict):
                update_nested(refdict[key], newdict[key])
            else:
                refdict[key] = value
        else:
            refdict.update({key: value})

def np2native(obj):
    """
    Convert from numpy types to python native types
    """
    if isinstance(obj, bytes):
        return obj.decode(ENCODING)
    if isinstance(obj, np.bytes_):
        return obj.tobytes().decode(ENCODING)
    elif isinstance(obj,np.ndarray):
        if any(isinstance(x, bytes) for x in obj):
            return [ x.decode(ENCODING) for x in obj ]
        elif any(isinstance(x, np.bytes_) for x in obj):
            return [ x.tobytes().decode(ENCODING) for x in obj ]
        else:
            return obj.tolist()
    elif isinstance(obj, np.generic):
        return obj.tolist()
    else:
        return obj

def load_file(fname, key=''):
    ext = Path(fname).suffix
    config = {}
    if ext == ".h5":
        config = load_h5(fname)
    elif ext == ".yaml" or ext == ".yml" :
        with open(fname, 'r') as inputfile:
            config = yaml.safe_load(inputfile)

    if key == 'input':
        config = delete_key(config, 'output')
    elif key == 'output':
        config = delete_key(config, 'input')

    return config

def save_file(config, fname, update=False):
    ext = Path(fname).suffix
    if ext == ".h5":
        save_h5(config, fname, update)
    elif ext == ".yaml" or ext == ".yml" :
        save_yaml(config, fname)
    return config

def save_yaml(config, fname):
    try:
        del(config['meta'])
    except KeyError:
        pass

    with open(fname, 'w') as outfile:
            yaml.dump(config, outfile, default_flow_style=None)

def load_h5(fname):
    sim = Cadet()
    sim.filename = fname
    sim.load()
    return(reconstruct(sim.root))

def save_h5(config, fname, update=False):
    sim = Cadet()
    sim.filename = fname

    if update:
        sim.root.update(Dict(config))
    else:
        sim.root = Dict(config)

    ## Do not add meta and output info to h5 file
    try:
        del(sim.root['meta'])
        del(sim.root['output'])
    except KeyError:
        pass

    sim.save()

def delete_key(config:dict, key:str):
    try:
        del(config[key])
    except KeyError:
        pass
    return config


if args['diff']:
    ## Diff ANY two files (even h5 vs yaml)
    ## Only prints changes

    config1 = load_file(args['diff'][0], args['key'])
    config2 = load_file(args['diff'][1], args['key'])

    pprint(DeepDiff(config1, config2), indent=2)

elif args['edit']:
    config = load_file(args['edit'], key='input')
    with tempfile.NamedTemporaryFile("w+") as tmpf:
        yaml.dump(config, tmpf)
        tmpf.seek(0)
        run([str(os.getenv('EDITOR')), tmpf.name])
        config = yaml.safe_load(tmpf)
    save_file(config, args['edit'], update=True)

elif args['files']:
    config = {}
    for fname in args['files']:
        update_nested(config, load_file(fname))

    if args['key'] == 'input':
        config = delete_key(config, 'output')
    elif args['key'] == 'output':
        config = delete_key(config, 'input')

    if args['print']:
        config = delete_key(config, 'meta')
        print(yaml.dump(config, allow_unicode=True, default_flow_style=None))
    elif args['output']:
        save_file(config, args['output'], update=args['update'])
