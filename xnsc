#!/bin/env bash

## Script to compile XNS (CMake version)
## load_modules isn't perfect: 

exec > >(tee "$HOME/xnsc.log") 2>&1
set -euo pipefail


[[ -z "$XNS_DEV_ROOT" ]] && echo "No dev root specified. Please set XNS_DEV_ROOT" && exit

# basedir="$HOME/dev"
basedir="$XNS_DEV_ROOT"
xnsdir="xns$XNS_DIR_SUFFIX"
ewddir="ewd$XNS_DIR_SUFFIX"
mathlibdir="mathlib$XNS_DIR_SUFFIX"
sparskitdir="sparskit$XNS_DIR_SUFFIX"


function preclean()
{
    echo "Cleaning build directories..."
    rm -rf "$basedir/$ewddir/build"
    rm -rf "$basedir/$mathlibdir/build"
    rm -rf "$basedir/$sparskitdir/build"
    rm -rf "$basedir/$xnsdir/build"

}

function builder()
{
    
    ## GCC10 hack
    export FCFLAGS="-w -fallow-argument-mismatch -O2"
    export FFLAGS="-w -fallow-argument-mismatch -O2"

    pkgdir="$1"
    extraargs="$2"

    [ "$clean" = "ON" ] && rm -rf "$basedir/$pkgdir/build"

    cd "$basedir"/"$pkgdir" 
    mkdir -p build && cd build 
    echo "--------------------"
    echo "Compiling $pkgdir..."
    echo "$pkgdir $extraargs"

    cmake -DCMAKE_BUILD_TYPE=$buildtype -DCMAKE_INSTALL_PREFIX=$installprefix $extraargs ..
    make -j 24
    cmake -DCMAKE_BUILD_TYPE=$buildtype -DCMAKE_INSTALL_PREFIX=$installprefix $extraargs ..
    make install 
    cd "$basedir"
}

function load_modules()
{
    if [[ "$compiler" == "intel" ]]; then 
        echo "setting up for intel compiler (JURECA)"
        
        if [[ "$(hostname)" =~ "jrl" ]]; then
            module --force purge
            module load Intel IntelMPI imkl CMake flex Boost
        fi

        export CC=mpiicc
        export FC=mpiifort
        export CXX=mpiicpc
        export FLAGS_FAST='-O3'

    elif [[ "$compiler" == "gnu" ]]; then
        echo "setting up for GNU compiler (LOCAL)"
        
        export WITH_LAPACK="-DHAVE_LAPACK"
        export LAPACK_LIB="-llapack"
        # export FLAGS_FAST='-O3'
        export FLAGS_FAST='-O3 -ffast-math -mtune=native'

        export CC=mpicc
        export FC=mpifort
        export CXX=mpicxx
    fi

}

buildtype="Debug"
installprefix="$HOME/local/simulation/"
extraargs=""
compiler="gnu"
build_deps="ON"
clean="OFF"


POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        -c|--clean)
            # preclean
            clean="ON"
            shift # past value
            ;;
        -b|--build)
            buildtype="$2"
            shift # past value
            shift # past value
            ;;
        -i|--intel)
            compiler="intel"
            shift # past value
            ;;
        -g|--gnu)
            compiler="gnu"
            shift # past value
            ;;
        --no-mkl)
            extraargs="$extraargs"" -DMKL=OFF -DMKL_PARALLEL=OFF"
            shift # past value
            ;;
        --no-mpi)
            extraargs="$extraargs"" -DMPI=OFF"
            shift # past value
            ;;
        -a|--args)
            extraargs="$extraargs"" $2"
            shift # past value
            shift
            ;;
        -p|--prefix)
            installprefix="$2"
            shift # past value
            shift # past value
            ;;
        -x|--xns)
            build_deps="OFF"
            shift # past value
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

load_modules
[ "$build_deps" = "ON" ] && builder "$ewddir" "$extraargs"
[ "$build_deps" = "ON" ] && builder "$mathlibdir" "$extraargs"
[ "$build_deps" = "ON" ] && builder "$sparskitdir" "$extraargs"
builder "$xnsdir" "$extraargs"
